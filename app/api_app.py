# -*- coding: utf-8 -*-
"""api_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mRTdFetLugHuYMFfpmyWeXv94GQNjEyd
"""

from cachetools import cached, TTLCache
from fastapi import FastAPI
import uvicorn
from argparse import ArgumentParser

# ========================== import de modules crées ===========================
from data_pulling import PlotterModule  # selon la classe créée

# Fonction de récupération de données
data = PlotterModule()

cache = TTLCache(maxsize=100, ttl=3600)
cache_1 = TTLCache(maxsize=100, ttl=3600)
cache_2 = TTLCache(maxsize=100, ttl=3600)


@cached(cache)
def model():
    modele = data.gt_model()
    return modele


@cached(cache_1)
def mydata():
    datas = data.gt_data
    return datas


@cached(cache_2)
def shap_values():
    shap_value_ = data.shap_val
    return shap_value_


# a route can be created to use the model one
model_result = model()
data_function = mydata()
shap_value_result = shap_values()

app = FastAPI()

"""# ``=============== Récupération de données ==============``"""


@app.get("/get_credit")
async def get_credit(ID: int):
    """
    Fonction de classification d'instance en entrant que l'ID 'SK_ID_CURR'

    """

    if ID not in data_function.index.tolist():
        return {"Veuillez saisir un identifiant client valide pour l'analyse."}

    else:
        return {"score": data_function.query(f"index == {ID}").loc[ID, "score"],
                "Demande de crédit": data_function.query(f"index == {ID}").loc[ID, "class_cat"]}


@app.get("/get_data")
async def get_data():
    """
    Route d'accès aux données via l'app streamlit
    """
    return {"data": data_function}


@app.get("/get_model_params")
async def get_model():

    """
    Récupération des paramètres spécifiques d'intérêt lors de l'entrainement
    Cela permet de reconstruire le modèle dans l'application du dashboard Streamlit
    """

    model_params = {
        'reg_alpha': model_result.reg_alpha,
        'num_leaves': model_result.num_leaves,
        'n_estimators': model_result.n_estimators,
        'max_depth': model_result.max_depth,
        'learning_rate': model_result.learning_rate
    }

    return {"model_params": model_params}


@app.get("/get_filter_data_by_id")
async def get_filter_data_by_id(ID: int):
    return {"get_filter_data_by_id": data_function.query(f"index == {ID}")}

parser = ArgumentParser(description="Retrieve host and port")
parser.add_argument("--host", type=str, default="0.0.0.0", help="Host IP (default: 0.0.0.0)")
parser.add_argument("--port", type=int, default=8001, help="Port number (default: 8001)")

if __name__ == "__main__":
    # run the app
    args = parser.parse_args()
    uvicorn.run(app, host=args.host, port=args.port)
